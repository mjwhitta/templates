#!/usr/bin/env bash

clean() { rm -f $script; exit 0; }

err() { echo -en "\e[31m" >&2; echo -e "[!] $@\e[0m"; }

info() { echo -en "\e[37m" >&2; echo -e "[=] $@\e[0m"; }

usage() {
    echo "Usage: ${0/*\//} [OPTIONS] <arg1>... [argN]"
    echo
    echo "TODO"
    echo
    echo "Options:"
    echo "    -f, --flag           Example flag"
    echo "    -f, --flag=FLAG      Example for storing cli arg"
    echo "    -h, --help           Display this help message"
    echo "    -p, --parallel       Run using parallel"
    local default="(default: $threads)"
    echo "    -t, --threads=NUM    Use the specied number of threads"
    echo "                         if running in parallel $default"
    echo
    exit $1
}

warn() { echo -en "\e[33m" >&2; echo -e "[-] $@\e[0m"; }

declare -a args
unset flag parallel
threads="32"

while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-f"|"--flag") flag="true" ;;
        "-f"|"--flag"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            flag="--flag $arg"
            ;;
        "-h"|"--help") usage 0 ;;
        "-p"|"--parallel") parallel="true" ;;
        "-t"|"--threads"*)
            case "$1" in
                "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 1 ;;
                *) shift; [[ $# -gt 0 ]] || usage 1; arg="$1" ;;
            esac
            threads="$arg"
            ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ -z ${args[@]} ]] || set -- "${args[@]}"

[[ $# -ge 1 ]] || usage 2

if [[ -n $parallel ]] && [[ -z $(command -v parallel) ]]; then
    warn "Parallel is not installed, using default behavior"
    unset parallel
fi

script="/tmp/${0/*\//}"
trap clean SIGINT

cat >$script <<EOF
#!/usr/bin/env bash
err() { echo -e "\\r\\e[31m[!] \$@\\e[0m$(tput el)"; }
info() { echo -e "\\r\\e[32m[+] \$@\\e[0m$(tput el)"; }
warn() { echo -e "\\r\\e[33m[-] \$@\\e[0m$(tput el)"; }
let "timeout = RANDOM % 5"
sleep \$timeout && info "\$1" # TODO
EOF
chmod 700 $script

declare -a dataset=($@)
if [[ -z ${dataset[@]} ]]; then
    err "No dataset provided"
    exit 3
fi
let "total = ${#dataset[@]}"

if [[ $total -gt 0 ]]; then
    info "$total jobs to run"
    if [[ -n $parallel ]]; then
        # Math
        left="$total"
        marker="0"
        maxdata="$(
            parallel -r --show-limit </dev/null | \
            awk '/Maximal used/ {print $NF; exit}'
        )"
        let "remainder = total % maxdata"
        round="0"
        let "rounds = total / maxdata"
        [[ $remainder -eq 0 ]] || let "rounds += 1"

        # Loop thru rounds
        [[ $rounds -eq 1 ]] || info "Splitting into $rounds rounds"
        while [[ $left -gt 0 ]]; do
            let "round += 1"
            [[ $rounds -eq 1 ]] || warn "Round $round"

            increment="$left"
            [[ $left -le $maxdata ]] || increment="$maxdata"

            parallel --bar --lb -P $threads -r $script {} ::: \
                ${dataset[@]:$marker:$increment}

            let "left -= increment"
            let "marker += increment"
        done
    else
        let "count = 1"
        clear="$(tput el)"
        for data in "${dataset[@]}"; do
            echo -en "\r[$count/$total]$clear" >&2
            $script "$data"
            let "count += 1"
        done; unset data
    fi
fi

clean
